apiVersion: v1  # Specifies the version of the Kubernetes API to use
kind: Service  # Defines the kind of object, in this case, a Service
metadata:
  name: example-nodeport-service  # The name of the service within the Kubernetes cluster
  namespace: default  # The namespace in which the service is created, "default" if not specified
  labels:  # Key/value pairs that are used to organize and select subsets of objects
    app: myapp
  annotations:  # Non-identifying metadata used by tools and libraries
    description: "An example NodePort service"
spec:
  type: NodePort  # The type of service, NodePort exposes the service on each Nodeâ€™s IP at a static port
  selector:  # Selector queries over pods, used to select the pods this service will route traffic to
    app: myapp
  ports:  # List of service ports mapped to the target ports in the pod
    - name: http  # Name of the port, can be anything
      protocol: TCP  # Protocol used by the service, TCP or UDP
      port: 80  # The port that this service should serve on
      targetPort: 8080  # The port on the container to send traffic to
      nodePort: 30007  # The port on the node where external traffic will come in on, chosen from a range (default: 30000-32767)
  clusterIP: None  # Setting this to 'None' makes this a "headless" service (no cluster IP), useful for service discovery without load balancing
  externalTrafficPolicy: Local  # Can be "Local" or "Cluster". "Local" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport services
  sessionAffinity: None  # Controls session affinity, enabling sticky sessions. Can be 'None' or 'ClientIP'
  sessionAffinityConfig:
    clientIP:  # Specific configuration for session affinity of type ClientIP
      timeoutSeconds: 10800  # Specifies the timeout of the session affinity (in seconds)
  externalIPs:  # List of IP addresses for which nodes in the cluster will also accept traffic for this service
    - 192.168.1.1
  loadBalancerIP: 192.168.1.2  # Specifies the IP address to assign to the Load Balancer (if supported)
  loadBalancerSourceRanges:  # A list of CIDR ranges that are allowed access to the load balancer
    - "192.168.0.0/16"
  healthCheckNodePort: 30222  # Specifies a health check node port for the service. Only relevant when `type` is set to LoadBalancer and `externalTrafficPolicy` is set to Local
  publishNotReadyAddresses: true  # If true, it allows routing traffic to pods even if they are not ready
  ipFamily: IPv4  # Can be set to IPv4 or IPv6 to specify single-stack networking
  allocateLoadBalancerNodePorts: true  # If set to true, Kubernetes will allocate a node port automatically for LoadBalancers
